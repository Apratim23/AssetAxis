// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl      = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkUserId String   @unique
  email     String   @unique
  name      String?
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]
  accounts Account[]
  budgets Budget[]

  @@map("users")
}

model Account {
  id        String   @id @default(uuid())
  userId    String
  name      String
  type      AccountType
  balance   Decimal @default(0)
  isDefault Boolean @default(false)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  accountId   String
  type        TransactionType
  amount      Decimal
  description String?
  date        DateTime 
  category     String
  receiptUrl String?
  isRecurring Boolean @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed DateTime?
  status      TransactionStatus @default(COMPLETED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}
enum TransactionType {
  INCOME
  EXPENSE
}
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Budget {
  id        String   @id @default(uuid())
  userId    String
  amount    Decimal
  lastAlertSent DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}